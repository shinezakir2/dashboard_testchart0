/**
 * The enumeration sets leftward or rightward item placement relative to the referenced item.
 * In the case of assistants or advisers, the referenced node is their immediate parent.
 * In the case of the family diagram, the referenced node is a sibling.
 *
 * @enum {AdviserPlacementType}
 */
export var AdviserPlacementType;
(function (AdviserPlacementType) {
    /**
     * Auto select by layout manager
     */
    AdviserPlacementType[AdviserPlacementType["Auto"] = 0] = "Auto";
    /**
     * Left side
     */
    AdviserPlacementType[AdviserPlacementType["Left"] = 2] = "Left";
    /**
     * Right side
     */
    AdviserPlacementType[AdviserPlacementType["Right"] = 3] = "Right";
})(AdviserPlacementType || (AdviserPlacementType = {}));
;
/**
 * Defines type of on-screen and in-layout annotation object. Annotations are geometrical
 * figures drawn around or bound to existing nodes of the diagram.
 *
 * @enum {AnnotationType}
 */
export var AnnotationType;
(function (AnnotationType) {
    /**
     * The connector annotation displays a spline between two nodes of the diagram.
     * They are drawn on top and across the existing diagram layout, and they don't affect nodes placement.
     * If available space between nodes is not enough to display connector annotation,
     * then control draws it outside on the side of them.
     */
    AnnotationType[AnnotationType["Connector"] = 0] = "Connector";
    /**
     * Shape annotation is a possibility to draw some geometrical shapes over several nodes of the diagram.
     */
    AnnotationType[AnnotationType["Shape"] = 1] = "Shape";
    /**
     * Highlight path annotation traces a path between a given sequence of nodes over existing relation lines in the diagram.
     */
    AnnotationType[AnnotationType["HighlightPath"] = 2] = "HighlightPath";
    /**
     * The in-layout label annotation display values over relation lines between nodes.
     * The control preserves space for labels in the diagram layout so they don't overlap nodes.
     * Label annotations are designed for auto-placement and bundling of connection lines between nodes when needed.
     */
    AnnotationType[AnnotationType["Label"] = 3] = "Label";
    /**
     * The background annotation highlights nodes via drawing the rectangular shape in the node's background.
     * If the same style annotations of neighboring nodes overlap, control merges them into one continuous polygon geometry.
     */
    AnnotationType[AnnotationType["Background"] = 4] = "Background";
    /**
     * Level annotation highlights same level nodes of the diagram via drawing continuous rectangular shape
     * from side to side in their background. Level has optional title on the side of the diagram view area.
     * Title may be placed inside or outside of the diagram. If it is placed inside, it is drawn in the
     * background and does not occupy space.
     */
    AnnotationType[AnnotationType["Level"] = 5] = "Level";
})(AnnotationType || (AnnotationType = {}));
;
/**
 * The enumeration defines the shape of children's formation. By default, control places children in a horizontal
 * line below the parent node. On a large scale, this may result in the end-user having to scroll screens
 * to view all of them. To compensate, we provide the option of placing all of the children of a parent node
 * in a square/matrix formation. That will reduce sideways screen scrolling by compacting the child
 * nodes into a much smaller area on the screen.
 *
 * @enum {ChildrenPlacementType}
 */
export var ChildrenPlacementType;
(function (ChildrenPlacementType) {
    /**
     * Auto = This mode lets you set nodes layout at the component level and then redefine it for individual nodes if needed.
     */
    ChildrenPlacementType[ChildrenPlacementType["Auto"] = 0] = "Auto";
    /**
     * Vertical layout
     */
    ChildrenPlacementType[ChildrenPlacementType["Vertical"] = 1] = "Vertical";
    /**
     * Horizontal layout
     */
    ChildrenPlacementType[ChildrenPlacementType["Horizontal"] = 2] = "Horizontal";
    /**
     * Matrix formation of the nodes
     */
    ChildrenPlacementType[ChildrenPlacementType["Matrix"] = 3] = "Matrix";
})(ChildrenPlacementType || (ChildrenPlacementType = {}));
;
/**
 * Just a list of named colors.
 *
 * @ignore
 * @enum {Colors}
 */
export var Colors;
(function (Colors) {
    Colors["AliceBlue"] = "#f0f8ff";
    Colors["AntiqueWhite"] = "#faebd7";
    Colors["Aqua"] = "#00ffff";
    Colors["Aquamarine"] = "#7fffd4";
    Colors["Azure"] = "#f0ffff";
    Colors["Beige"] = "#f5f5dc";
    Colors["Bisque"] = "#ffe4c4";
    Colors["Black"] = "#000000";
    Colors["BlanchedAlmond"] = "#ffebcd";
    Colors["Blue"] = "#0000ff";
    Colors["BlueViolet"] = "#8a2be2";
    Colors["Brown"] = "#a52a2a";
    Colors["BurlyWood"] = "#deb887";
    Colors["Bronze"] = "#cd7f32";
    Colors["CadetBlue"] = "#5f9ea0";
    Colors["ChartReuse"] = "#7fff00";
    Colors["Chocolate"] = "#d2691e";
    Colors["Coral"] = "#ff7f50";
    Colors["CornflowerBlue"] = "#6495ed";
    Colors["Cornsilk"] = "#fff8dc";
    Colors["Crimson"] = "#dc143c";
    Colors["Cyan"] = "#00ffff";
    Colors["DarkBlue"] = "#00008b";
    Colors["DarkCyan"] = "#008b8b";
    Colors["DarkGoldenrod"] = "#b8860b";
    Colors["DarkGray"] = "#a9a9a9";
    Colors["DarkGreen"] = "#006400";
    Colors["DarkKhaki"] = "#bdb76b";
    Colors["DarkMagenta"] = "#8b008b";
    Colors["DarkOliveGreen"] = "#556b2f";
    Colors["Darkorange"] = "#ff8c00";
    Colors["DarkOrchid"] = "#9932cc";
    Colors["DarkRed"] = "#8b0000";
    Colors["DarkSalmon"] = "#e9967a";
    Colors["DarkSeaGreen"] = "#8fbc8f";
    Colors["DarkSlateBlue"] = "#483d8b";
    Colors["DarkSlateGray"] = "#2f4f4f";
    Colors["DarkTurquoise"] = "#00ced1";
    Colors["DarkViolet"] = "#9400d3";
    Colors["DeepPink"] = "#ff1493";
    Colors["DeepSkyBlue"] = "#00bfff";
    Colors["DimGray"] = "#696969";
    Colors["DodgerBlue"] = "#1e90ff";
    Colors["FireBrick"] = "#b22222";
    Colors["FloralWhite"] = "#fffaf0";
    Colors["ForestGreen"] = "#228b22";
    Colors["Fuchsia"] = "#ff00ff";
    Colors["Gainsboro"] = "#dcdcdc";
    Colors["GhostWhite"] = "#f8f8ff";
    Colors["Gold"] = "#ffd700";
    Colors["Goldenrod"] = "#daa520";
    Colors["Gray"] = "#808080";
    Colors["Green"] = "#008000";
    Colors["GreenYellow"] = "#adff2f";
    Colors["Honeydew"] = "#f0fff0";
    Colors["Hotpink"] = "#ff69b4";
    Colors["IndianRed"] = "#cd5c5c";
    Colors["Indigo"] = "#4b0082";
    Colors["Ivory"] = "#fffff0";
    Colors["Khaki"] = "#f0e68c";
    Colors["Lavender"] = "#e6e6fa";
    Colors["LavenderBlush"] = "#fff0f5";
    Colors["Lawngreen"] = "#7cfc00";
    Colors["Lemonchiffon"] = "#fffacd";
    Colors["LightBlue"] = "#add8e6";
    Colors["LightCoral"] = "#f08080";
    Colors["LightCyan"] = "#e0ffff";
    Colors["LightGoldenrodYellow"] = "#fafad2";
    Colors["LightGray"] = "#d3d3d3";
    Colors["LightGreen"] = "#90ee90";
    Colors["LightPink"] = "#ffb6c1";
    Colors["LightSalmon"] = "#ffa07a";
    Colors["LightSeaGreen"] = "#20b2aa";
    Colors["LightSkyBlue"] = "#87cefa";
    Colors["LightSlateGray"] = "#778899";
    Colors["LightSteelBlue"] = "#b0c4de";
    Colors["LightYellow"] = "#ffffe0";
    Colors["Lime"] = "#00ff00";
    Colors["Limegreen"] = "#32cd32";
    Colors["Linen"] = "#faf0e6";
    Colors["Magenta"] = "#ff00ff";
    Colors["Maroon"] = "#800000";
    Colors["MediumAquamarine"] = "#66cdaa";
    Colors["MediumBlue"] = "#0000cd";
    Colors["MediumOrchid"] = "#ba55d3";
    Colors["MediumPurple"] = "#9370d8";
    Colors["MediumSeaGreen"] = "#3cb371";
    Colors["MediumSlateBlue"] = "#7b68ee";
    Colors["MediumSpringGreen"] = "#00fa9a";
    Colors["MediumTurquoise"] = "#48d1cc";
    Colors["MediumVioletRed"] = "#c71585";
    Colors["MidnightBlue"] = "#191970";
    Colors["MintCream"] = "#f5fffa";
    Colors["MistyRose"] = "#ffe4e1";
    Colors["Moccasin"] = "#ffe4b5";
    Colors["NavajoWhite"] = "#ffdead";
    Colors["Navy"] = "#000080";
    Colors["Oldlace"] = "#fdf5e6";
    Colors["Olive"] = "#808000";
    Colors["Olivedrab"] = "#6b8e23";
    Colors["Orange"] = "#ffa500";
    Colors["OrangeRed"] = "#ff4500";
    Colors["Orchid"] = "#da70d6";
    Colors["PaleGoldenRod"] = "#eee8aa";
    Colors["PaleGreen"] = "#98fb98";
    Colors["PaleTurquoise"] = "#afeeee";
    Colors["PaleVioletRed"] = "#d87093";
    Colors["Papayawhip"] = "#ffefd5";
    Colors["Peachpuff"] = "#ffdab9";
    Colors["Peru"] = "#cd853f";
    Colors["Pink"] = "#ffc0cb";
    Colors["Plum"] = "#dda0dd";
    Colors["PowderBlue"] = "#b0e0e6";
    Colors["Purple"] = "#800080";
    Colors["Red"] = "#ff0000";
    Colors["RosyBrown"] = "#bc8f8f";
    Colors["RoyalBlue"] = "#4169e1";
    Colors["SaddleBrown"] = "#8b4513";
    Colors["Salmon"] = "#fa8072";
    Colors["SandyBrown"] = "#f4a460";
    Colors["SeaGreen"] = "#2e8b57";
    Colors["Seashell"] = "#fff5ee";
    Colors["Sienna"] = "#a0522d";
    Colors["Silver"] = "#c0c0c0";
    Colors["SkyBlue"] = "#87ceeb";
    Colors["SlateBlue"] = "#6a5acd";
    Colors["SlateGray"] = "#708090";
    Colors["Snow"] = "#fffafa";
    Colors["SpringGreen"] = "#00ff7f";
    Colors["SteelBlue"] = "#4682b4";
    Colors["Tan"] = "#d2b48c";
    Colors["Teal"] = "#008080";
    Colors["Thistle"] = "#d8bfd8";
    Colors["Tomato"] = "#ff6347";
    Colors["Turquoise"] = "#40e0d0";
    Colors["Violet"] = "#ee82ee";
    Colors["Wheat"] = "#f5deb3";
    Colors["White"] = "#ffffff";
    Colors["WhiteSmoke"] = "#f5f5f5";
    Colors["Yellow"] = "#ffff00";
    Colors["YellowGreen"] = "#9acd32";
})(Colors || (Colors = {}));
;
/**
 * Label placement relative to connector annotation. Connector annotation is bound and drawn between two nodes
 * defined by two properties = `fromItem` and `toItem`. Label can be placed close to "start", "end" nodes or in between of them
 *  along the connector line.
 *
 * @enum {ConnectorLabelPlacementType}
 */
export var ConnectorLabelPlacementType;
(function (ConnectorLabelPlacementType) {
    ConnectorLabelPlacementType[ConnectorLabelPlacementType["From"] = 0] = "From";
    ConnectorLabelPlacementType[ConnectorLabelPlacementType["Between"] = 1] = "Between";
    ConnectorLabelPlacementType[ConnectorLabelPlacementType["To"] = 2] = "To";
})(ConnectorLabelPlacementType || (ConnectorLabelPlacementType = {}));
;
/**
 * Connector placement type defines style of connector line drawing over diagram layout. It supports two options =
 * the `Straight` is classic direct line connecting two nodes, this is the most expected style of connector annotation
 * drawing over diagram, the second style is called `Offbeat` and it design to dynamically adopt to nodes mutual
 * location and gap between them. It uses free hand line style drawing going from start to the end nodes. Since every diagram
 * is packed with various connection lines, this annotation placement style is deliberately made not straight, so it can be
 * noticeable on top of other lines of the diagram.
 *
 * @enum {ConnectorPlacementType}
 */
export var ConnectorPlacementType;
(function (ConnectorPlacementType) {
    /**
     * Places connector annotation in the way that it does not overlap underlying diagram connector lines.
     * If nodes are close to each other and gap between them cannot fit annotation, then
     * it will be drawn on the side of the nodes, so it will have enough space for arrow and label.
     */
    ConnectorPlacementType[ConnectorPlacementType["Offbeat"] = 0] = "Offbeat";
    /**
     * Straight line annotation between nodes. This annotation mode provides basic conflict resolution between annotations
     * overlapping each other. If two or more straight annotations overlap each other then layout engine will
     * add extra offset to them, so they will be drawn in parallel to each other.
     */
    ConnectorPlacementType[ConnectorPlacementType["Straight"] = 1] = "Straight";
})(ConnectorPlacementType || (ConnectorPlacementType = {}));
;
/**
 * Connector shape type defines number of lines and arrows at their ends drawn between nodes of the connector annotation.
 * This feature combined with basic conflict resolution, which places overlapping annotations in parallel when they overlap each other,
 * gives you full flexibility over variations of possible connector lines between two given nodes of diagram.
 *
 * @enum {ConnectorShapeType}
 */
export var ConnectorShapeType;
(function (ConnectorShapeType) {
    /**
     * Single line with one arrow
     */
    ConnectorShapeType[ConnectorShapeType["OneWay"] = 0] = "OneWay";
    /**
     * Two parallel lines with single arrows
     */
    ConnectorShapeType[ConnectorShapeType["TwoWay"] = 1] = "TwoWay";
    /**
     * Single line with 2 arrows.
     */
    ConnectorShapeType[ConnectorShapeType["BothWay"] = 2] = "BothWay";
})(ConnectorShapeType || (ConnectorShapeType = {}));
;
export var ConnectorStyleType;
(function (ConnectorStyleType) {
    ConnectorStyleType[ConnectorStyleType["Extra"] = 0] = "Extra";
    ConnectorStyleType[ConnectorStyleType["Regular"] = 1] = "Regular";
    ConnectorStyleType[ConnectorStyleType["Highlight"] = 2] = "Highlight";
})(ConnectorStyleType || (ConnectorStyleType = {}));
;
/**
 * Connection lines style. This option is only applicable to nodes minimized to markers or lines.
 * Full size nodes are always connected with squared connection lines
 *
 * @enum {ConnectorType}
 */
export var ConnectorType;
(function (ConnectorType) {
    /**
     * Orthogonal connection lines
     */
    ConnectorType[ConnectorType["Squared"] = 0] = "Squared";
    /**
     * Angular direct node to node connection lines
     */
    ConnectorType[ConnectorType["Angular"] = 1] = "Angular";
    /**
     * Curved direct node to node connection lines
     */
    ConnectorType[ConnectorType["Curved"] = 2] = "Curved";
})(ConnectorType || (ConnectorType = {}));
;
/**
 * Elbow style of connection lines
 *
 * @enum {ElbowType}
 */
export var ElbowType;
(function (ElbowType) {
    /**
     * No elbow
     */
    ElbowType[ElbowType["None"] = 0] = "None";
    /**
     * Dot marker at the intersection
     */
    ElbowType[ElbowType["Dot"] = 1] = "Dot";
    /**
     * Bevel elbow
     */
    ElbowType[ElbowType["Bevel"] = 2] = "Bevel";
    /**
     * Round elbow
     */
    ElbowType[ElbowType["Round"] = 3] = "Round";
})(ElbowType || (ElbowType = {}));
;
/**
 * Defines option state.
 *
 * @readonly
 * @enum {number}
 */
export var Enabled;
(function (Enabled) {
    /**
     * Option state is auto defined.
     */
    Enabled[Enabled["Auto"] = 0] = "Auto";
    /**
     * Enabled
     */
    Enabled[Enabled["True"] = 1] = "True";
    /**
     * Disabled
     */
    Enabled[Enabled["False"] = 2] = "False";
})(Enabled || (Enabled = {}));
;
/**
 * This enumeration defines objects gravity in the chart relative to parents and children.
 * For example connection lines can be drawn with arrows, so this enumeration controls
 * direction of arrows up towards parents or down towards children in the hierarchy.
 * The other example is nodes placement close to their immediate parents or immediate children
 * in case when parents and children are offset from them by multiple levels in hierarchy.
 *
 * @enum {GroupByType}
 */
export var GroupByType;
(function (GroupByType) {
    GroupByType[GroupByType["None"] = 0] = "None";
    GroupByType[GroupByType["Parents"] = 1] = "Parents";
    GroupByType[GroupByType["Children"] = 2] = "Children";
})(GroupByType || (GroupByType = {}));
;
/**
 * Horizontal alignment
 *
 * @enum {HorizontalAlignmentType}
 */
export var HorizontalAlignmentType;
(function (HorizontalAlignmentType) {
    HorizontalAlignmentType[HorizontalAlignmentType["Center"] = 0] = "Center";
    HorizontalAlignmentType[HorizontalAlignmentType["Left"] = 1] = "Left";
    HorizontalAlignmentType[HorizontalAlignmentType["Right"] = 2] = "Right";
})(HorizontalAlignmentType || (HorizontalAlignmentType = {}));
;
/**
 * The enumeration defines child node placement relative to its parent node.
 * By default, the control places all children that belong to the same parent as
 * the horizontal line below it. That works for a regular hierarchy of nodes
 * having the same type. In the organizational chart, we have a lot of exceptions
 * and non-hierarchical relations between nodes. For this purpose, we provide custom
 * item types to place nodes around the logical parent, which helps visually
 * differentiate nodes logically belonging to the same parent.  These placement
 * options give a lot of space for creating roles such as an Assistant, Adviser,
 * various Partners, and co-heads in the organization.  Additionally, control allows
 * shaping the same type of children into vertical and matrix formations
 * and place them into multiple levels.
 *
 * @enum {ItemType}
 */
export var ItemType;
(function (ItemType) {
    /**
     * The regular type places node below parent.
     */
    ItemType[ItemType["Regular"] = 0] = "Regular";
    /**
     * The assistant type places node at the row on the side of the connection line going from parent to its children.
     */
    ItemType[ItemType["Assistant"] = 1] = "Assistant";
    /**
     * The sub-assistant node type is a variation of the assistant node type.
     * The sub-assistant places node at the row on the side of the connection line
     * going from parent to its children. The connection line goes out of the top side of the node.
     */
    ItemType[ItemType["SubAssistant"] = 4] = "SubAssistant";
    /**
     * The adviser type places node on the right or left side of the parent.
     */
    ItemType[ItemType["Adviser"] = 2] = "Adviser";
    /**
     * The sub-adviser type places node on the right or left side of the parent.
     * The connection line goes out of the top side of the sub-adviser node.
     */
    ItemType[ItemType["SubAdviser"] = 5] = "SubAdviser";
    /**
     * The general partner type is an imitation of multiple inheritances in the organizational chart hierarchy.
     * The general-partner node is drawn side by side with its logical parent, and control places
     * regular children below them, so they visually look like parents. Another layout specifics
     * of the general partner is that it is connected to its logical parent's parent.
     * So visually, it becomes an immediate child of its grandparent.
     */
    ItemType[ItemType["GeneralPartner"] = 6] = "GeneralPartner";
    /**
     * The limited partner is a variation of the general partner.
     * The only difference is that it is not connected to its logical grandparent.
     */
    ItemType[ItemType["LimitedPartner"] = 7] = "LimitedPartner";
    /**
     * The adviser partner is a variation of the limited partner.
     * The difference is that it has an extra connection line to its logical parent.
     */
    ItemType[ItemType["AdviserPartner"] = 8] = "AdviserPartner";
})(ItemType || (ItemType = {}));
;
export var LabelType;
(function (LabelType) {
    LabelType[LabelType["Regular"] = 0] = "Regular";
    LabelType[LabelType["Dummy"] = 1] = "Dummy";
    LabelType[LabelType["Fixed"] = 2] = "Fixed";
    LabelType[LabelType["None"] = 3] = "None";
})(LabelType || (LabelType = {}));
;
export var Layers;
(function (Layers) {
    Layers[Layers["LevelAnnotation"] = 1] = "LevelAnnotation";
    Layers[Layers["BackgroundAnnotation"] = 2] = "BackgroundAnnotation";
    Layers[Layers["BackgroundAnnotations"] = 3] = "BackgroundAnnotations";
    Layers[Layers["BackgroundConnectorAnnotation"] = 4] = "BackgroundConnectorAnnotation";
    Layers[Layers["BackgroundHighlightPathAnnotations"] = 5] = "BackgroundHighlightPathAnnotations";
    Layers[Layers["Connector"] = 6] = "Connector";
    Layers[Layers["ForegroundHighlightPathAnnotations"] = 7] = "ForegroundHighlightPathAnnotations";
    Layers[Layers["Highlight"] = 8] = "Highlight";
    Layers[Layers["Marker"] = 9] = "Marker";
    Layers[Layers["Label"] = 10] = "Label";
    Layers[Layers["Cursor"] = 11] = "Cursor";
    Layers[Layers["Item"] = 12] = "Item";
    Layers[Layers["ForegroundAnnotations"] = 13] = "ForegroundAnnotations";
    Layers[Layers["ForegroundConnectorAnnotation"] = 14] = "ForegroundConnectorAnnotation";
    Layers[Layers["Annotation"] = 15] = "Annotation";
    Layers[Layers["Controls"] = 16] = "Controls";
})(Layers || (Layers = {}));
;
/**
 * Line style of connection lines.
 *
 * @enum {LineType}
 */
export var LineType;
(function (LineType) {
    LineType[LineType["Solid"] = 0] = "Solid";
    LineType[LineType["Dotted"] = 1] = "Dotted";
    LineType[LineType["Dashed"] = 2] = "Dashed";
})(LineType || (LineType = {}));
;
/**
 * Interactivity mode. Control implements standard behavior of classic desktop UI controls. It supports single selected node - cursor.
 * It supports on mouse over node visual feedback - highlight. It supports selection of group of nodes - selected items.
 * All that functionality can be disabled depending on your application requirements.
 *
 * @enum {NavigationMode}
 */
export var NavigationMode;
(function (NavigationMode) {
    /**
     * Everything is on.
     */
    NavigationMode[NavigationMode["Default"] = 0] = "Default";
    /**
     * Cursor selection only without highlight.
     */
    NavigationMode[NavigationMode["CursorOnly"] = 1] = "CursorOnly";
    /**
     * Mouse over feedback only
     */
    NavigationMode[NavigationMode["HighlightOnly"] = 3] = "HighlightOnly";
    /**
     * No interactivity
     */
    NavigationMode[NavigationMode["Inactive"] = 2] = "Inactive";
})(NavigationMode || (NavigationMode = {}));
;
/**
 * Neighbors selection mode. The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.
 * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items
 * of the diagram in full size and draw all other as markers.
 *
 * This enumeration controls visibility of neighbors of the cursor node in the auto fit mode. It allows to draw
 * them in full size regardless of available space.
 *
 * @enum {NavigationMode}
 */
export var NeighboursSelectionMode;
(function (NeighboursSelectionMode) {
    /**
     * Selects parents and children of the cursor item
     */
    NeighboursSelectionMode[NeighboursSelectionMode["ParentsAndChildren"] = 0] = "ParentsAndChildren";
    /**
     * Selects parents, children, and siblings of the cursor item.
     */
    NeighboursSelectionMode[NeighboursSelectionMode["ParentsChildrenSiblingsAndSpouses"] = 1] = "ParentsChildrenSiblingsAndSpouses";
})(NeighboursSelectionMode || (NeighboursSelectionMode = {}));
;
/**
 * Controls diagram layout orientation. The control can be rotated in any direction, this is needed for arabic support and various layout.
 *
 * @enum {OrientationType}
 */
export var OrientationType;
(function (OrientationType) {
    OrientationType[OrientationType["Top"] = 0] = "Top";
    OrientationType[OrientationType["Bottom"] = 1] = "Bottom";
    OrientationType[OrientationType["Left"] = 2] = "Left";
    OrientationType[OrientationType["Right"] = 3] = "Right";
    OrientationType[OrientationType["None"] = 4] = "None";
})(OrientationType || (OrientationType = {}));
;
/**
 * Fits diagram into available screen space. When diagram size significantly larger that available screen space, its scrolling and navigation
 * becomes problematic, so we support automatic diagram fit into the screen space via rendering some of its nodes in form of small markers.
 * Control supports several page fit mode options which can match your requirements depending on diagram layout, orientation and number of nodes.
 *
 * Autosize - this option is opposite to auto fit. It lets you expand control size to fit all diagram nodes full size without scroll bars.
 *
 * @enum {PageFitMode}
 */
export var PageFitMode;
(function (PageFitMode) {
    /**
     * Disabled. All nodes are being rendered using their templates.
     */
    PageFitMode[PageFitMode["None"] = 0] = "None";
    /**
     * Fits diagram into the view width, so it has no horizontal scrollbar.
     */
    PageFitMode[PageFitMode["PageWidth"] = 1] = "PageWidth";
    /**
     * Fits diagram into the view hight, so it has no vertical scrollbar.
     */
    PageFitMode[PageFitMode["PageHeight"] = 2] = "PageHeight";
    /**
     * Fits diagram into the view so it has no scroll bars.
     */
    PageFitMode[PageFitMode["FitToPage"] = 3] = "FitToPage";
    /**
     * This is opposite mode to auto fit. In this mode diagram controls its size, it sets its size to fit all nodes and render them full size using templates.
     */
    PageFitMode[PageFitMode["AutoSize"] = 5] = "AutoSize";
    /**
     * Renders all nodes as markers regardless of available screen space. Control selects and renders full size cursor, its neighbours and selected nodes only.
     * Don't forget to disable selection path as well, so nodes from cursor up to the root are not selected.
     */
    PageFitMode[PageFitMode["SelectionOnly"] = 6] = "SelectionOnly";
})(PageFitMode || (PageFitMode = {}));
;
/**
 * Defines element placement relative to rectangular area it is bound to.
 *
 * @enum {PlacementType}
 */
export var PlacementType;
(function (PlacementType) {
    /**
     * Defined by other control options.
     */
    PlacementType[PlacementType["Auto"] = 0] = "Auto";
    PlacementType[PlacementType["TopLeft"] = 8] = "TopLeft";
    PlacementType[PlacementType["Top"] = 1] = "Top";
    PlacementType[PlacementType["TopRight"] = 2] = "TopRight";
    PlacementType[PlacementType["RightTop"] = 11] = "RightTop";
    PlacementType[PlacementType["Right"] = 3] = "Right";
    PlacementType[PlacementType["RightBottom"] = 12] = "RightBottom";
    PlacementType[PlacementType["BottomRight"] = 4] = "BottomRight";
    PlacementType[PlacementType["Bottom"] = 5] = "Bottom";
    PlacementType[PlacementType["BottomLeft"] = 6] = "BottomLeft";
    PlacementType[PlacementType["LeftBottom"] = 10] = "LeftBottom";
    PlacementType[PlacementType["Left"] = 7] = "Left";
    PlacementType[PlacementType["LeftTop"] = 9] = "LeftTop";
})(PlacementType || (PlacementType = {}));
;
/**
 * This enumeration is used to tell rendering callback functions current state of the template.
 * It is needed for proper events binding and content updates.
 *
 * @enum {RenderingMode}
 */
export var RenderingMode;
(function (RenderingMode) {
    /**
     * Template is just created.
     */
    RenderingMode[RenderingMode["Create"] = 0] = "Create";
    /**
     * Template is reused and update is needed.
     */
    RenderingMode[RenderingMode["Update"] = 1] = "Update";
})(RenderingMode || (RenderingMode = {}));
;
export var SegmentType;
(function (SegmentType) {
    SegmentType[SegmentType["Line"] = 0] = "Line";
    SegmentType[SegmentType["Move"] = 1] = "Move";
    SegmentType[SegmentType["QuadraticArc"] = 2] = "QuadraticArc";
    SegmentType[SegmentType["CubicArc"] = 3] = "CubicArc";
    SegmentType[SegmentType["Dot"] = 4] = "Dot";
})(SegmentType || (SegmentType = {}));
;
/**
 * Selection path mode. This enumeration controls visibility of nodes between cursor and the root of the diagram in the auto fit mode. It allows to draw
 * them in full size regardless of available space and auto fit mode.
 *
 * The control supports diagram auto fit into screen view. It is achieved via drawing nodes in form of markers.
 * So small nodes make diagram fit into the screen space, but they have no details. Our solution is to show cursor and selected items
 * of the diagram in full size and draw all other diagram nodes as markers.
 *
 * @enum {SelectionPathMode}
 */
export var SelectionPathMode;
(function (SelectionPathMode) {
    /**
     * No selection path
     */
    SelectionPathMode[SelectionPathMode["None"] = 0] = "None";
    /**
     * Selects cursor node parents up to the root are renders them full size regardless of available space.
     */
    SelectionPathMode[SelectionPathMode["FullStack"] = 1] = "FullStack";
})(SelectionPathMode || (SelectionPathMode = {}));
;
/**
 * Shapes
 *
 * @enum {ShapeType}
 */
export var ShapeType;
(function (ShapeType) {
    ShapeType[ShapeType["Rectangle"] = 0] = "Rectangle";
    ShapeType[ShapeType["Oval"] = 1] = "Oval";
    ShapeType[ShapeType["Triangle"] = 2] = "Triangle";
    ShapeType[ShapeType["CrossOut"] = 3] = "CrossOut";
    ShapeType[ShapeType["Circle"] = 4] = "Circle";
    ShapeType[ShapeType["Rhombus"] = 5] = "Rhombus";
    ShapeType[ShapeType["Wedge"] = 7] = "Wedge";
    ShapeType[ShapeType["FramedOval"] = 8] = "FramedOval";
    ShapeType[ShapeType["FramedTriangle"] = 9] = "FramedTriangle";
    ShapeType[ShapeType["FramedWedge"] = 10] = "FramedWedge";
    ShapeType[ShapeType["FramedRhombus"] = 11] = "FramedRhombus";
    ShapeType[ShapeType["None"] = 6] = "None";
})(ShapeType || (ShapeType = {}));
;
export var SideFlag;
(function (SideFlag) {
    SideFlag[SideFlag["Top"] = 1] = "Top";
    SideFlag[SideFlag["Right"] = 2] = "Right";
    SideFlag[SideFlag["Bottom"] = 4] = "Bottom";
    SideFlag[SideFlag["Left"] = 8] = "Left";
})(SideFlag || (SideFlag = {}));
;
/**
 * Text rotation
 *
 * @enum {TextOrientationType}
 */
export var TextOrientationType;
(function (TextOrientationType) {
    /**
     * Regular horizontal text
     */
    TextOrientationType[TextOrientationType["Horizontal"] = 0] = "Horizontal";
    /**
     * Rotate text left for 90 degree.
     */
    TextOrientationType[TextOrientationType["RotateLeft"] = 1] = "RotateLeft";
    /**
     * Rotate text right for 90 degree.
     */
    TextOrientationType[TextOrientationType["RotateRight"] = 2] = "RotateRight";
    /**
     * Depends on other options.
     */
    TextOrientationType[TextOrientationType["Auto"] = 3] = "Auto";
})(TextOrientationType || (TextOrientationType = {}));
;
/**
 * Controls update of the diagram
 *
 * @enum {UpdateMode}
 */
export var UpdateMode;
(function (UpdateMode) {
    /**
     * Forces control to make a full chart redraw. It is equivalent to initial chart creation.
     * It removes everything from placeholder and renders all elements again.
     */
    UpdateMode[UpdateMode["Recreate"] = 0] = "Recreate";
    /**
     * Optimized refresh. It only updates visual elements which needs to be updated.
     */
    UpdateMode[UpdateMode["Refresh"] = 1] = "Refresh";
    /**
     * Updates highlight position only
     */
    UpdateMode[UpdateMode["PositonHighlight"] = 2] = "PositonHighlight";
})(UpdateMode || (UpdateMode = {}));
;
/**
 * Defines relation between two vectors
 *
 * @enum {VectorRelationType}
 */
export var VectorRelationType;
(function (VectorRelationType) {
    VectorRelationType[VectorRelationType["None"] = 0] = "None";
    VectorRelationType[VectorRelationType["Null"] = 1] = "Null";
    VectorRelationType[VectorRelationType["Collinear"] = 2] = "Collinear";
    VectorRelationType[VectorRelationType["Opposite"] = 3] = "Opposite";
})(VectorRelationType || (VectorRelationType = {}));
;
/**
 * Controls nodes vertical alignment inside row of nodes. If row of nodes contains nodes of
 * multiple sizes then small nodes are vertically aligned relative to their large neighbours.
 *
 * @enum {VerticalAlignmentType}
 */
export var VerticalAlignmentType;
(function (VerticalAlignmentType) {
    VerticalAlignmentType[VerticalAlignmentType["Top"] = 0] = "Top";
    VerticalAlignmentType[VerticalAlignmentType["Middle"] = 1] = "Middle";
    VerticalAlignmentType[VerticalAlignmentType["Bottom"] = 2] = "Bottom";
})(VerticalAlignmentType || (VerticalAlignmentType = {}));
;
/**
 * Minimal nodes visibility in the diagram. If auto fit of diagram into current page size is enabled, then
 * this option controls minimum allowed size of diagram nodes.
 *
 * @enum {Visibility}
 */
export var Visibility;
(function (Visibility) {
    /**
     * Selects best visibility mode.
     */
    Visibility[Visibility["Auto"] = 0] = "Auto";
    /**
     * Regular template based diagram nodes
     */
    Visibility[Visibility["Normal"] = 1] = "Normal";
    /**
     * Diagram draws nodes in form of markers
     */
    Visibility[Visibility["Dot"] = 2] = "Dot";
    /**
     * Diagram only draws connection lines and hides actual nodes.
     */
    Visibility[Visibility["Line"] = 3] = "Line";
    /**
     * Makes node invisible in layout. If node has no parents then
     * its connection lines are hidden as well.
     *
     * @ignore
     */
    Visibility[Visibility["Invisible"] = 4] = "Invisible";
})(Visibility || (Visibility = {}));
;
/**
 * Option to draw annotation in the foreground or in the background of diagram nodes.
 *
 * @enum {ZOrderType}
 */
export var ZOrderType;
(function (ZOrderType) {
    /**
     * Depends on annotation type.
     */
    ZOrderType[ZOrderType["Auto"] = 0] = "Auto";
    /**
     * Background
     */
    ZOrderType[ZOrderType["Background"] = 1] = "Background";
    /**
     * Foreground
     */
    ZOrderType[ZOrderType["Foreground"] = 2] = "Foreground";
})(ZOrderType || (ZOrderType = {}));
;
//# sourceMappingURL=data:application/json;base64,