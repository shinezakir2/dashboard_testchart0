import { Component, Input, ViewChild } from '@angular/core';
import { OrientationType } from '../enums';
import { Graphics } from './graphics';
import { Rect, Size, Point } from '../structs';
// @ts-ignore
import { getFixOfPixelAlignment, getInnerSize, getElementOffset } from 'basicprimitives';
import { AnnotationLabelTemplate, ButtonsTemplate, CheckBoxTemplate, CursorTemplate, DotHighlightTemplate, GroupTitleTemplate, HighlightTemplate, ItemTemplate, UserTemplate, CustomRenderTemplate, LabelAnnotationTemplate, LevelTitleTemplate, LevelBackgroundTemplate } from './templates';
import * as i0 from "@angular/core";
import * as i1 from "./task-manager-factory";
import * as i2 from "./rotated-text.component";
import * as i3 from "./components/item.component";
import * as i4 from "./components/checkbox.component";
import * as i5 from "./components/group-title.component";
import * as i6 from "./components/cursor.component";
import * as i7 from "./components/highlight.component";
import * as i8 from "./components/dot-highlight.component";
import * as i9 from "./components/level-title.component";
import * as i10 from "./components/level-background.component";
import * as i11 from "@angular/common";
class LayoutOptions {
    constructor(config = {}) {
        this.autoSize = false;
        this.controlSize = new Size();
        this.scale = 1;
        this.frameMousePanelRect = new Rect();
        this.framePlaceholderSize = new Size();
        this.titlesMousePanelRect = new Rect();
        this.titlesPlaceholderSize = new Size();
        this.scrollPanelRect = new Rect();
        this.mousePanelSize = new Size();
        this.placeholderSize = new Size();
        Object.assign(this, config);
    }
}
class BaseDiagramState {
    constructor() {
        this.viewportSize = new Size(0, 0);
        this.contentPosition = new Point(0, 0);
        this.centerOnCursor = true;
        this.highlightItem = null;
        this.cursorItem = null;
        this.selectedItems = [];
    }
}
;
export class BaseDiagramComponent {
    constructor(host, zone, taskManagerFactory) {
        this.host = host;
        this.zone = zone;
        this.centerOnCursor = true;
        this.state = new BaseDiagramState();
        this.layoutOptions = new LayoutOptions();
        this.timer = null;
        this.templatesHash = {};
        /* Component template properties */
        this.placeholder = null;
        this.framePlaceholder = null;
        this.titlesPlaceholder = null;
        this.calloutPlaceholder = null;
        this.controlPanelStyle = {};
        this.frameMousePanelStyle = {};
        this.framePlaceholderStyle = {};
        this.titlesMousePanelStyle = {};
        this.titlesPlaceholderStyle = {};
        this.scrollPanelStyle = {};
        this.placeholderOffset = undefined;
        this.mousePanelStyle = {};
        this.placeholderStyle = {};
        this.calloutPlaceholderStyle = {};
        this.taskManagerFactory = taskManagerFactory;
        this.graphics = new Graphics(new Size(0, 0));
        var templates = {
            AnnotationLabelTemplate,
            ButtonsTemplate,
            CheckBoxTemplate,
            CursorTemplate,
            DotHighlightTemplate,
            GroupTitleTemplate,
            HighlightTemplate,
            ItemTemplate,
            UserTemplate,
            CustomRenderTemplate,
            LabelAnnotationTemplate,
            LevelTitleTemplate,
            LevelBackgroundTemplate
        };
        this.tasks = taskManagerFactory.factory(this.getOptions.bind(this), this.getGraphics.bind(this), this.getLayout.bind(this), this.setLayout.bind(this), templates);
        this.layoutOptions = new LayoutOptions();
    }
    ngAfterViewInit() {
        var onSizeChanged = this.onSizeChanged.bind(this);
        this.observer = new ResizeObserver(() => this.zone.run(() => onSizeChanged()));
        this.observer.observe(this.controlPanelRef.nativeElement);
        this.fixPixelAlignment();
    }
    _onHighlightChanging(event, itemId, newItemId) { }
    ;
    _onHighlightChanged(eventArgs) { }
    ;
    _onCursorChanging(event, itemId, newItemId) { }
    ;
    _onCursorChanged(eventArgs) { }
    ;
    _onSelectionChanging(event, selectedItems, newSelectedItems) { }
    ;
    _onSelectionChanged(eventArgs) { }
    ;
    onItemRender(data) {
        const { templateName } = data;
        const template = this.templatesHash[templateName];
        return template.itemTemplate;
    }
    onHighlightRender(data) {
        const { templateName } = data;
        const template = this.templatesHash[templateName];
        return template.highlightTemplate;
    }
    onCursorRender(data) {
        const { templateName } = data;
        const template = this.templatesHash[templateName];
        return template.cursorTemplate;
    }
    getOptions() {
        const { config } = this.state;
        const templates = config.templates || [];
        this.templatesHash = {};
        templates.forEach(template => {
            this.templatesHash[template.name] = template;
        });
        const effectiveTemplates = templates.map(template => {
            const { buttonsTemplate } = template;
            return {
                ...template,
                onButtonsRender: !buttonsTemplate ? null : () => buttonsTemplate
            };
        });
        const { highlightItem, cursorItem, selectedItems } = this.state;
        return {
            ...config,
            templates: effectiveTemplates,
            highlightItem,
            cursorItem,
            selectedItems,
            onItemRender: this.onItemRender.bind(this),
            onCursorRender: this.onCursorRender.bind(this),
            onHighlightRender: this.onHighlightRender.bind(this),
            onGroupTitleRender: !config.groupTitleTemplate ? null : () => config.groupTitleTemplate,
            onLevelBackgroundRender: !config.levelBackgroundTemplate ? null : () => config.levelBackgroundTemplate,
            onLevelTitleRender: !config.levelTitleTemplate ? null : () => config.levelTitleTemplate,
            onButtonsRender: !config.buttonsTemplate ? null : () => config.buttonsTemplate
        };
    }
    getGraphics() {
        return this.graphics;
    }
    getLayout() {
        var centerOnCursor = this.state.centerOnCursor;
        var viewportSize = this.state.viewportSize;
        var contentPosition = this.state.contentPosition;
        // var { centerOnCursor, viewportSize, contentPosition } = this.state;
        return {
            forceCenterOnCursor: centerOnCursor,
            scrollPanelSize: new Size(viewportSize.width, viewportSize.height),
            placeholderOffset: new Point(contentPosition.x, contentPosition.y)
        };
    }
    setLayout(layoutOptions) {
        const { autoSize, // resize control if true
        controlSize, // Sets control Size in auto scale mode
        scale, // scale is needed for scale transform CSS creation
        frameMousePanelRect, framePlaceholderSize, // the frame content size before CSS Scale Transform applied
        titlesMousePanelRect, titlesPlaceholderSize, // Titles size before CSS Scale Transform applied
        scrollPanelRect, mousePanelSize, // Content mouse panel size
        placeholderSize // Content size before CSS Scale Transform applied
         } = layoutOptions;
        this.layoutOptions = new LayoutOptions({
            autoSize,
            controlSize: new Size(controlSize.width, controlSize.height),
            scale,
            frameMousePanelRect: new Rect(frameMousePanelRect.x, frameMousePanelRect.y, frameMousePanelRect.width, frameMousePanelRect.height),
            framePlaceholderSize: new Size(framePlaceholderSize.width, framePlaceholderSize.height),
            titlesMousePanelRect: new Rect(titlesMousePanelRect.x, titlesMousePanelRect.y, titlesMousePanelRect.width, titlesMousePanelRect.height),
            titlesPlaceholderSize: new Size(titlesPlaceholderSize.width, titlesPlaceholderSize.height),
            scrollPanelRect: new Rect(scrollPanelRect.x, scrollPanelRect.y, scrollPanelRect.width, scrollPanelRect.height),
            mousePanelSize: new Size(mousePanelSize.width, mousePanelSize.height),
            placeholderSize: new Size(placeholderSize.width, placeholderSize.height)
        });
    }
    fixPixelAlignment() {
        const { nativeElement } = this.controlPanelRef;
        var pixelAlignmentFix = getFixOfPixelAlignment(nativeElement);
        nativeElement.style.marginLeft = pixelAlignmentFix.width + "px";
        nativeElement.style.marginTop = pixelAlignmentFix.height + "px";
    }
    onSizeChanged() {
        const { width, height } = getInnerSize(this.controlPanelRef.nativeElement);
        this.setState({
            viewportSize: new Size(width, height),
            centerOnCursor: true
        });
    }
    onScroll(event) {
        if (this.timer == null) {
            this.timer = window.setTimeout(this.onRefreshViewport.bind(this), 100);
        }
    }
    onRefreshViewport() {
        window.clearTimeout(this.timer);
        this.timer = null;
        const { scrollTop, scrollLeft } = this.scrollPanelRef.nativeElement;
        this.setState({
            contentPosition: new Point(Math.floor(scrollLeft), Math.floor(scrollTop)),
            centerOnCursor: false
        });
    }
    onFrameMouseMove(event) {
        const placeholderOffset = getElementOffset(this.frameMousePanelRef.nativeElement), x = event.pageX - placeholderOffset.left, y = event.pageY - placeholderOffset.top, projectItemsToFrameTask = this.tasks.getTask("ProjectItemsToFrameTask"), highlightItemOptionTask = this.tasks.getTask("HighlightItemOptionTask");
        if (highlightItemOptionTask.hasHighlightEnabled()) {
            const itemId = projectItemsToFrameTask.getTreeItemForMousePosition(x, y, highlightItemOptionTask.getGravityRadius());
            this.setHighlightItem(event, itemId);
        }
    }
    onFrameClick(event) {
        const placeholderOffset = getElementOffset(this.frameMousePanelRef.nativeElement), x = event.pageX - placeholderOffset.left, y = event.pageY - placeholderOffset.top, projectItemsToFrameTask = this.tasks.getTask("ProjectItemsToFrameTask"), cursorItemOptionTask = this.tasks.getTask("CursorItemOptionTask"), highlightItemOptionTask = this.tasks.getTask("HighlightItemOptionTask"), newCursorItemId = projectItemsToFrameTask.getTreeItemForMousePosition(x, y, highlightItemOptionTask.getGravityRadius());
        if (newCursorItemId !== null) {
            if (cursorItemOptionTask.hasCursorEnabled()) {
                this.setCursorItem(event, newCursorItemId);
                this.controlPanelRef.nativeElement.focus();
            }
        }
    }
    onMouseMove(event) {
        const placeholderOffset = getElementOffset(this.mousePanelRef.nativeElement), x = event.pageX - placeholderOffset.left, y = event.pageY - placeholderOffset.top, createTransformTask = this.tasks.getTask("CreateTransformTask"), highlightItemOptionTask = this.tasks.getTask("HighlightItemOptionTask");
        if (highlightItemOptionTask.hasHighlightEnabled()) {
            const itemId = createTransformTask.getTreeItemForMousePosition(x, y, highlightItemOptionTask.getGravityRadius());
            this.setHighlightItem(event, itemId);
        }
    }
    getEventArgs(oldTreeItemId, newTreeItemId, name = null) {
        var result = {}, combinedContextsTask = this.tasks.getTask("CombinedContextsTask"), alignDiagramTask = this.tasks.getTask("AlignDiagramTask"), oldItemConfig = combinedContextsTask.getConfig(oldTreeItemId), newItemConfig = combinedContextsTask.getConfig(newTreeItemId), itemPosition, offset, panelOffset;
        if (oldItemConfig && oldItemConfig.id != null) {
            result.oldContext = oldItemConfig;
        }
        if (newItemConfig && newItemConfig.id != null) {
            result.context = newItemConfig;
            if (newItemConfig.parent !== null) {
                result.parentItem = combinedContextsTask.getConfig(newItemConfig.parent);
            }
            panelOffset = getElementOffset(this.mousePanelRef.nativeElement);
            offset = getElementOffset(this.scrollPanelRef.nativeElement);
            itemPosition = alignDiagramTask.getItemPosition(newTreeItemId);
            result.position = new Rect(itemPosition.actualPosition)
                .translate(panelOffset.left, panelOffset.top)
                .translate(-offset.left, -offset.top);
        }
        if (name != null) {
            result.name = name;
        }
        return result;
    }
    setHighlightItem(event, newHighlightItemId) {
        let eventArgs, cancel = false;
        const { highlightItem } = this.state;
        if (newHighlightItemId !== highlightItem) {
            eventArgs = this._onHighlightChanging(event, highlightItem, newHighlightItemId);
            if (!eventArgs.cancel) {
                this.setState({
                    highlightItem: newHighlightItemId
                });
                this._onHighlightChanged(eventArgs);
            }
        }
    }
    setCursorItem(event, newCursorItemId) {
        let eventArgs, cancel = false;
        const { cursorItem } = this.state;
        if (newCursorItemId !== cursorItem) {
            eventArgs = this._onCursorChanging(event, cursorItem, newCursorItemId);
            if (!eventArgs.cancel) {
                this.setState({
                    cursorItem: newCursorItemId,
                    centerOnCursor: true
                });
                this._onCursorChanged(eventArgs);
            }
        }
    }
    onClick(event) {
        var placeholderOffset = getElementOffset(this.mousePanelRef.nativeElement), x = event.pageX - placeholderOffset.left, y = event.pageY - placeholderOffset.top, createTransformTask = this.tasks.getTask("CreateTransformTask"), cursorItemOptionTask = this.tasks.getTask("CursorItemOptionTask"), highlightItemOptionTask = this.tasks.getTask("HighlightItemOptionTask"), newCursorItemId = createTransformTask.getTreeItemForMousePosition(x, y, highlightItemOptionTask.getGravityRadius());
        var target = event.target;
        if (newCursorItemId !== null) {
            if (target.getAttribute("name") === "checkbox" || target.getAttribute("name") === "selectiontext") { //ignore jslint
            }
            else {
                if (cursorItemOptionTask.hasCursorEnabled()) {
                    this.setCursorItem(event, newCursorItemId);
                    this.controlPanelRef.nativeElement.focus();
                }
            }
        }
    }
    onCheckboxChange(event) {
        let { selectedItems } = this.state;
        let newSelectedItems = [];
        const target = event.target;
        var itemId = target.getAttribute("data-id");
        const checked = target.checked;
        let cancel = false;
        if (itemId != null) {
            if (checked) {
                newSelectedItems = [...selectedItems, itemId];
            }
            else {
                // eslint-disable-next-line
                newSelectedItems = selectedItems.filter(id => id != itemId); // User type may not mach string value in data attribute
            }
            var eventArgs = this._onSelectionChanging(event, selectedItems, newSelectedItems);
            if (!eventArgs.cancel) {
                this.setState({
                    selectedItems: newSelectedItems
                });
                this._onSelectionChanged(eventArgs);
            }
        }
    }
    onKeyDown(event) {
        var highlightItemTask = this.tasks.getTask("HighlightItemTask"), highlightItemOptionTask = this.tasks.getTask("HighlightItemOptionTask"), cursorItemTask = this.tasks.getTask("CursorItemTask"), cursorItemOptionTask = this.tasks.getTask("CursorItemOptionTask"), alignDiagramTask = this.tasks.getTask('AlignDiagramTask'), createTransformTask = this.tasks.getTask('CreateTransformTask'), transform = createTransformTask.getTransform(), navigationItem = null, newNavigationItem, direction = null, accepted;
        if (highlightItemOptionTask.hasHighlightEnabled() && cursorItemOptionTask.hasCursorEnabled()) {
            navigationItem = highlightItemTask.getHighlightTreeItem();
            if (navigationItem === null) {
                navigationItem = cursorItemTask.getCursorTreeItem();
            }
        }
        else if (highlightItemOptionTask.hasHighlightEnabled()) {
            navigationItem = highlightItemTask.getHighlightTreeItem();
        }
        else if (cursorItemOptionTask.hasCursorEnabled()) {
            navigationItem = cursorItemTask.getCursorTreeItem();
        }
        if (navigationItem != null) {
            switch (event.which) {
                case 13: /*Enter*/
                    if (cursorItemOptionTask.hasCursorEnabled()) {
                        this.setCursorItem(event, navigationItem);
                        event.preventDefault();
                        this.controlPanelRef.nativeElement.focus();
                    }
                    break;
                case 40: /*Down*/
                    direction = OrientationType.Bottom;
                    break;
                case 38: /*Up*/
                    direction = OrientationType.Top;
                    break;
                case 37: /*Left*/
                    direction = OrientationType.Left;
                    break;
                case 39: /*Right*/
                    direction = OrientationType.Right;
                    break;
                default:
                    break;
            }
            if (direction != null) {
                accepted = false;
                while (!accepted) {
                    accepted = true;
                    direction = transform.getOrientation(direction);
                    newNavigationItem = alignDiagramTask.getNextItem(navigationItem, direction);
                    if (newNavigationItem != null) {
                        event.preventDefault();
                        if (highlightItemOptionTask.hasHighlightEnabled()) {
                            this.setHighlightItem(event, newNavigationItem);
                        }
                        else if (cursorItemOptionTask.hasCursorEnabled()) {
                            this.setCursorItem(event, newNavigationItem);
                        }
                    }
                }
                this.controlPanelRef.nativeElement.focus();
            }
        }
    }
    setState(newState = {}) {
        this.state = {
            ...this.state,
            ...newState
        };
        this.render();
    }
    ngOnInit() {
        this.render();
    }
    render() {
        this.tasks.process('OptionsTask', null, false);
        const { placeholder, calloutplaceholder: calloutPlaceholder, frameplaceholder: framePlaceholder, titlesplaceholder: titlesPlaceholder } = this.graphics.placeholders;
        this.placeholder = placeholder;
        this.titlesPlaceholder = titlesPlaceholder;
        this.framePlaceholder = framePlaceholder;
        this.calloutPlaceholder = calloutPlaceholder;
        const { autoSize, // resize control if true
        controlSize, // Sets control Size in auto scale mode
        scale, // scale is needed for scale transform CSS creation
        frameMousePanelRect, titlesMousePanelRect, scrollPanelRect, mousePanelSize // Content mouse panel size
         } = this.layoutOptions;
        var scaleText = "scale(" + scale + "," + scale + ")";
        this.controlPanelStyle = autoSize ? controlSize.getCSS() : {};
        this.frameMousePanelStyle = frameMousePanelRect.getCSS();
        if (framePlaceholder) {
            this.framePlaceholderStyle = {
                ...(framePlaceholder.rect.getCSS()),
                "transform": scaleText,
                "msTransform": scaleText,
                "WebkitTransform": scaleText,
                "OTransform": scaleText,
                "MozTransform": scaleText
            };
        }
        this.titlesMousePanelStyle = {
            ...titlesMousePanelRect.getCSS()
        };
        if (titlesPlaceholder) {
            this.titlesPlaceholderStyle = {
                ...(titlesPlaceholder.rect.getCSS()),
                "transformOrigin": "0 0",
                "transform": scaleText,
                "msTransform": scaleText,
                "WebkitTransform": scaleText,
                "OTransform": scaleText,
                "MozTransform": scaleText
            };
        }
        this.scrollPanelStyle = {
            ...(scrollPanelRect.getCSS()),
            border: (scrollPanelRect.x > 0 ? "1px dotted #dddddd" : "")
        };
        this.mousePanelStyle = {
            ...(mousePanelSize.getCSS())
        };
        this.placeholderStyle = {
            ...(placeholder.rect.getCSS()),
            "transform": scaleText,
            "msTransform": scaleText,
            "WebkitTransform": scaleText,
            "OTransform": scaleText,
            "MozTransform": scaleText
        };
        if (calloutPlaceholder) {
            this.calloutPlaceholderStyle = {
                left: calloutPlaceholder.rect.x + "px",
                top: calloutPlaceholder.rect.y + "px"
            };
        }
        const { centerOnCursor } = this.state;
        if (centerOnCursor) {
            const centerOnCursorTask = this.tasks.getTask("CenterOnCursorTask");
            this.placeholderOffset = centerOnCursorTask.getPlaceholderOffset();
        }
    }
    ngOnDestroy() {
        // destroy timer
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        // destroy observer
        this.observer.disconnect();
    }
}
BaseDiagramComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: BaseDiagramComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.TaskManagerFactory }], target: i0.ɵɵFactoryTarget.Component });
BaseDiagramComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: BaseDiagramComponent, selector: "ng-component", inputs: { centerOnCursor: "centerOnCursor" }, viewQueries: [{ propertyName: "frameMousePanelRef", first: true, predicate: ["frameMousePanelRef"], descendants: true }, { propertyName: "framePlaceholderRef", first: true, predicate: ["framePlaceholderRef"], descendants: true }, { propertyName: "titlesMousePanelRef", first: true, predicate: ["titlesMousePanelRef"], descendants: true }, { propertyName: "titlesPlaceholderRef", first: true, predicate: ["titlesPlaceholderRef"], descendants: true }, { propertyName: "scrollPanelRef", first: true, predicate: ["scrollPanelRef"], descendants: true }, { propertyName: "mousePanelRef", first: true, predicate: ["mousePanelRef"], descendants: true }, { propertyName: "placeholderRef", first: true, predicate: ["placeholderRef"], descendants: true }, { propertyName: "calloutPlaceholderRef", first: true, predicate: ["calloutPlaceholderRef"], descendants: true }, { propertyName: "controlPanelRef", first: true, predicate: ["controlPanelRef"], descendants: true }], ngImport: i0, template: "<!-- root control panel -->\n<div #controlPanelRef\n  class=\"control-panel\"\n  [ngStyle]=\"controlPanelStyle\"\n  (keydown)=\"onKeyDown($event)\"\n  tabIndex=\"0\"\n>\n  <div *ngIf=\"framePlaceholder\"\n    #frameMousePanelRef\n    class=\"frame-mouse-panel\"\n    [ngStyle]=\"frameMousePanelStyle\"\n    (click)=\"onFrameClick($event)\"\n    (mousemove)=\"onFrameMouseMove($event)\"\n  >\n    <div #framePlaceholderRef\n      class=\"frame-placeholder\" \n      [ngStyle]=\"framePlaceholderStyle\"\n    >\n      <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: framePlaceholder}\"></ng-container>\n    </div>\n  </div>\n  <div *ngIf=\"titlesPlaceholder\"\n    #titlesMousePanelRef\n    class=\"titles-mouse-panel\"\n    [ngStyle]=\"titlesMousePanelStyle\"\n    (mousemove)=\"onFrameMouseMove($event)\"\n    (click)=\"onFrameClick($event)\"\n  >\n    <div #titlesPlaceholderRef\n      [ngStyle]=\"titlesPlaceholderStyle\"\n      class=\"titles-placeholder\"\n     >\n      <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: titlesPlaceholder}\"></ng-container>\n    </div>\n  </div>\n  <div\n    #scrollPanelRef\n    class=\"scroll-panel\"\n    [ngStyle]=\"scrollPanelStyle\"\n    (scroll)=\"onScroll($event)\"\n    [scrollLeft]=\"placeholderOffset ? placeholderOffset.x : undefined\"\n    [scrollTop]=\"placeholderOffset ? placeholderOffset.y : undefined\"\n  >\n    <div #mousePanelRef\n      class=\"mouse-panel\"\n      [ngStyle]=\"mousePanelStyle\"\n      (mousemove)=\"onMouseMove($event)\"\n      (click)=\"onClick($event)\"\n      (change)=\"onCheckboxChange($event)\"\n    >\n      <div #placeholderRef\n        class=\"placeholder\"\n        [ngStyle]=\"placeholderStyle\"\n      >\n        <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: placeholder}\"></ng-container>\n        <div *ngIf=\"calloutPlaceholder\"\n          #calloutPlaceholderRef\n          class=\"callout-placeholder\"\n          [ngStyle]=\"calloutPlaceholderStyle\"\n        >\n          <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: calloutPlaceholder}\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!--Templates: -->\n<ng-template #layerTemplate let-placeholder>\n  <div *ngFor=\"let layer of placeholder.layers\" class=\"layer\">\n    <ng-container *ngIf=\"layer\">\n      <div *ngFor=\"let label of layer.labels\" class=\"label\" [ngStyle]= \"label.style\">\n        <rotated-text\n          [width]=\"label.width\"\n          [height]=\"label.height\"\n          [orientation]=\"label.orientation\"\n          [horizontalAlignment]=\"label.horizontalAlignment\"\n          [verticalAlignment]=\"label.verticalAlignment\"\n        >{{label.label}}</rotated-text>\n      </div>\n      <svg \n        *ngIf=\"layer.polylines.length > 0\"\n        attr.height.px=\"{{placeholder.size.height}}\"\n        attr.width.px=\"{{placeholder.size.width}}\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        [ngStyle]=\"{width: placeholder.size.width + 'px', height: placeholder.size.height + 'px'}\"\n      >\n        <path *ngFor=\"let path of layer.polylines\" [attr.d]=\"path.data\" [ngStyle]=\"path.style\"></path>\n      </svg>\n      <div *ngFor=\"let item of layer.items;\" class=\"template\" [ngStyle]=\"item.style\">\n        <ng-container [ngSwitch]=\"item.templateType\">\n          <ng-container *ngSwitchCase=\"'itemTemplate'\">\n            <bp-item [itemConfig]=\"item.context.context\" [itemTitleFirstFontColor]=\"item.context.itemTitleFirstFontColor\" [itemTitleSecondFontColor]=\"item.context.itemTitleSecondFontColor\"></bp-item>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'checkboxTemplate'\">\n            <bp-checkbox [id]=\"item.context.id\" [isSelected]=\"item.context.isSelected\" [label]=\"item.context.selectCheckBoxLabel\"></bp-checkbox>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'groupTitleTemplate'\">\n            <bp-group-title [options]=\"item.context\" [itemConfig]=\"item.context.context\" [width]=\"item.context.width\" [height]=\"item.context.height\"></bp-group-title>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'cursorTemplate'\">\n            <bp-cursor [templateConfig]=\"item.context.templateConfig\"></bp-cursor>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'highlightTemplate'\">\n            <bp-highlight [templateConfig]=\"item.context.templateConfig\"></bp-highlight>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'dotHighlightTemplate'\">\n            <bp-dot-highlight [templateConfig]=\"item.context.templateConfig\"></bp-dot-highlight>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'levelTitleTemplate'\">\n            <bp-level-title [options]=\"item.context\" [annotationConfig]=\"item.context.context\" [width]=\"item.context.width\" [height]=\"item.context.height\"></bp-level-title>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'levelBackgroundTemplate'\">\n            <bp-level-background [annotationConfig]=\"item.context.context\"></bp-level-background>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'labelAnnotationTemplate'\">\n            <div class=\"label-annotation\">{{item.context.context.title}}</div>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'annotationLabelTemplate'\">\n            <div class=\"label-annotation\">{{item.context.context.label}}</div>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"item.templateRef; context: item.context\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n", styles: [".control-panel{position:relative;overflow:hidden;top:0px;left:0px;width:100%;height:100%;padding:0;margin-bottom:0;margin-right:0}.frame-mouse-panel{position:absolute;overflow:hidden}.frame-placeholder{position:absolute;overflow:hidden;transform-origin:0 0}.titles-mouse-panel,.titles-placeholder{position:absolute;overflow:hidden}.scroll-panel{position:absolute;overflow:auto;-webkit-overflow-scrolling:touch}.mouse-panel{position:absolute;overflow:hidden}.placeholder{position:absolute;overflow:hidden;transform-origin:0 0}.callout-placeholder{position:absolute;overflow:visible}.layer{position:absolute;overflow:visible;left:0px;top:0px}.label{position:absolute;overflow:visible;font-family:Trebuchet MS,Tahoma,Verdana,Arial,sans-serif;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;-webkit-touch-callout:none;user-select:none;box-sizing:content-box}.template{position:absolute;overflow:visible;font-family:Trebuchet MS,Tahoma,Verdana,Arial,sans-serif;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;-webkit-touch-callout:none;user-select:none;box-sizing:content-box;padding:0;margin:0}.label-annotation{position:absolute;overflow:visible;font-family:Trebuchet MS,Tahoma,Verdana,Arial,sans-serif;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;-webkit-touch-callout:none;user-select:none;box-sizing:content-box;width:100%;text-align:center}\n"], components: [{ type: i2.RotatedText, selector: "rotated-text", inputs: ["width", "height", "orientation", "horizontalAlignment", "verticalAlignment"] }, { type: i3.ItemComponent, selector: "bp-item", inputs: ["itemTitleFirstFontColor", "itemTitleSecondFontColor", "itemConfig"] }, { type: i4.CheckboxComponent, selector: "bp-checkbox", inputs: ["id", "label", "isSelected"] }, { type: i5.GroupTitleComponent, selector: "bp-group-title", inputs: ["options", "itemConfig", "width", "height"] }, { type: i6.CursorComponent, selector: "bp-cursor", inputs: ["templateConfig"] }, { type: i7.HighlightComponent, selector: "bp-highlight", inputs: ["templateConfig"] }, { type: i8.DotHighlightComponent, selector: "bp-dot-highlight", inputs: ["templateConfig"] }, { type: i9.LevelTitleComponent, selector: "bp-level-title", inputs: ["options", "annotationConfig", "width", "height"] }, { type: i10.LevelBackgroundComponent, selector: "bp-level-background", inputs: ["annotationConfig"] }], directives: [{ type: i11.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i11.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i11.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i11.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: BaseDiagramComponent, decorators: [{
            type: Component,
            args: [{ template: "<!-- root control panel -->\n<div #controlPanelRef\n  class=\"control-panel\"\n  [ngStyle]=\"controlPanelStyle\"\n  (keydown)=\"onKeyDown($event)\"\n  tabIndex=\"0\"\n>\n  <div *ngIf=\"framePlaceholder\"\n    #frameMousePanelRef\n    class=\"frame-mouse-panel\"\n    [ngStyle]=\"frameMousePanelStyle\"\n    (click)=\"onFrameClick($event)\"\n    (mousemove)=\"onFrameMouseMove($event)\"\n  >\n    <div #framePlaceholderRef\n      class=\"frame-placeholder\" \n      [ngStyle]=\"framePlaceholderStyle\"\n    >\n      <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: framePlaceholder}\"></ng-container>\n    </div>\n  </div>\n  <div *ngIf=\"titlesPlaceholder\"\n    #titlesMousePanelRef\n    class=\"titles-mouse-panel\"\n    [ngStyle]=\"titlesMousePanelStyle\"\n    (mousemove)=\"onFrameMouseMove($event)\"\n    (click)=\"onFrameClick($event)\"\n  >\n    <div #titlesPlaceholderRef\n      [ngStyle]=\"titlesPlaceholderStyle\"\n      class=\"titles-placeholder\"\n     >\n      <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: titlesPlaceholder}\"></ng-container>\n    </div>\n  </div>\n  <div\n    #scrollPanelRef\n    class=\"scroll-panel\"\n    [ngStyle]=\"scrollPanelStyle\"\n    (scroll)=\"onScroll($event)\"\n    [scrollLeft]=\"placeholderOffset ? placeholderOffset.x : undefined\"\n    [scrollTop]=\"placeholderOffset ? placeholderOffset.y : undefined\"\n  >\n    <div #mousePanelRef\n      class=\"mouse-panel\"\n      [ngStyle]=\"mousePanelStyle\"\n      (mousemove)=\"onMouseMove($event)\"\n      (click)=\"onClick($event)\"\n      (change)=\"onCheckboxChange($event)\"\n    >\n      <div #placeholderRef\n        class=\"placeholder\"\n        [ngStyle]=\"placeholderStyle\"\n      >\n        <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: placeholder}\"></ng-container>\n        <div *ngIf=\"calloutPlaceholder\"\n          #calloutPlaceholderRef\n          class=\"callout-placeholder\"\n          [ngStyle]=\"calloutPlaceholderStyle\"\n        >\n          <ng-container *ngTemplateOutlet=\"layerTemplate; context: {$implicit: calloutPlaceholder}\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!--Templates: -->\n<ng-template #layerTemplate let-placeholder>\n  <div *ngFor=\"let layer of placeholder.layers\" class=\"layer\">\n    <ng-container *ngIf=\"layer\">\n      <div *ngFor=\"let label of layer.labels\" class=\"label\" [ngStyle]= \"label.style\">\n        <rotated-text\n          [width]=\"label.width\"\n          [height]=\"label.height\"\n          [orientation]=\"label.orientation\"\n          [horizontalAlignment]=\"label.horizontalAlignment\"\n          [verticalAlignment]=\"label.verticalAlignment\"\n        >{{label.label}}</rotated-text>\n      </div>\n      <svg \n        *ngIf=\"layer.polylines.length > 0\"\n        attr.height.px=\"{{placeholder.size.height}}\"\n        attr.width.px=\"{{placeholder.size.width}}\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        [ngStyle]=\"{width: placeholder.size.width + 'px', height: placeholder.size.height + 'px'}\"\n      >\n        <path *ngFor=\"let path of layer.polylines\" [attr.d]=\"path.data\" [ngStyle]=\"path.style\"></path>\n      </svg>\n      <div *ngFor=\"let item of layer.items;\" class=\"template\" [ngStyle]=\"item.style\">\n        <ng-container [ngSwitch]=\"item.templateType\">\n          <ng-container *ngSwitchCase=\"'itemTemplate'\">\n            <bp-item [itemConfig]=\"item.context.context\" [itemTitleFirstFontColor]=\"item.context.itemTitleFirstFontColor\" [itemTitleSecondFontColor]=\"item.context.itemTitleSecondFontColor\"></bp-item>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'checkboxTemplate'\">\n            <bp-checkbox [id]=\"item.context.id\" [isSelected]=\"item.context.isSelected\" [label]=\"item.context.selectCheckBoxLabel\"></bp-checkbox>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'groupTitleTemplate'\">\n            <bp-group-title [options]=\"item.context\" [itemConfig]=\"item.context.context\" [width]=\"item.context.width\" [height]=\"item.context.height\"></bp-group-title>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'cursorTemplate'\">\n            <bp-cursor [templateConfig]=\"item.context.templateConfig\"></bp-cursor>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'highlightTemplate'\">\n            <bp-highlight [templateConfig]=\"item.context.templateConfig\"></bp-highlight>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'dotHighlightTemplate'\">\n            <bp-dot-highlight [templateConfig]=\"item.context.templateConfig\"></bp-dot-highlight>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'levelTitleTemplate'\">\n            <bp-level-title [options]=\"item.context\" [annotationConfig]=\"item.context.context\" [width]=\"item.context.width\" [height]=\"item.context.height\"></bp-level-title>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'levelBackgroundTemplate'\">\n            <bp-level-background [annotationConfig]=\"item.context.context\"></bp-level-background>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'labelAnnotationTemplate'\">\n            <div class=\"label-annotation\">{{item.context.context.title}}</div>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'annotationLabelTemplate'\">\n            <div class=\"label-annotation\">{{item.context.context.label}}</div>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"item.templateRef; context: item.context\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n", styles: [".control-panel{position:relative;overflow:hidden;top:0px;left:0px;width:100%;height:100%;padding:0;margin-bottom:0;margin-right:0}.frame-mouse-panel{position:absolute;overflow:hidden}.frame-placeholder{position:absolute;overflow:hidden;transform-origin:0 0}.titles-mouse-panel,.titles-placeholder{position:absolute;overflow:hidden}.scroll-panel{position:absolute;overflow:auto;-webkit-overflow-scrolling:touch}.mouse-panel{position:absolute;overflow:hidden}.placeholder{position:absolute;overflow:hidden;transform-origin:0 0}.callout-placeholder{position:absolute;overflow:visible}.layer{position:absolute;overflow:visible;left:0px;top:0px}.label{position:absolute;overflow:visible;font-family:Trebuchet MS,Tahoma,Verdana,Arial,sans-serif;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;-webkit-touch-callout:none;user-select:none;box-sizing:content-box}.template{position:absolute;overflow:visible;font-family:Trebuchet MS,Tahoma,Verdana,Arial,sans-serif;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;-webkit-touch-callout:none;user-select:none;box-sizing:content-box;padding:0;margin:0}.label-annotation{position:absolute;overflow:visible;font-family:Trebuchet MS,Tahoma,Verdana,Arial,sans-serif;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;-webkit-touch-callout:none;user-select:none;box-sizing:content-box;width:100%;text-align:center}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.TaskManagerFactory }]; }, propDecorators: { frameMousePanelRef: [{
                type: ViewChild,
                args: ['frameMousePanelRef']
            }], framePlaceholderRef: [{
                type: ViewChild,
                args: ['framePlaceholderRef']
            }], titlesMousePanelRef: [{
                type: ViewChild,
                args: ['titlesMousePanelRef']
            }], titlesPlaceholderRef: [{
                type: ViewChild,
                args: ['titlesPlaceholderRef']
            }], scrollPanelRef: [{
                type: ViewChild,
                args: ['scrollPanelRef']
            }], mousePanelRef: [{
                type: ViewChild,
                args: ['mousePanelRef']
            }], placeholderRef: [{
                type: ViewChild,
                args: ['placeholderRef']
            }], calloutPlaceholderRef: [{
                type: ViewChild,
                args: ['calloutPlaceholderRef']
            }], controlPanelRef: [{
                type: ViewChild,
                args: ['controlPanelRef']
            }], centerOnCursor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,