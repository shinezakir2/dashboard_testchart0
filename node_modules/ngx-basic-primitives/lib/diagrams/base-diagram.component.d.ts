import { AfterViewInit, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import { Placeholder, Graphics } from './graphics';
import { Size, Point } from '../structs';
import { TaskManagerFactory } from './task-manager-factory';
import { TemplateConfig } from '../configs/template-config';
import * as i0 from "@angular/core";
declare class BaseDiagramState {
    config: any;
    viewportSize: Size;
    contentPosition: Point;
    centerOnCursor: boolean;
    highlightItem: number | string | null;
    cursorItem: number | string | null;
    selectedItems: Array<string | number>;
}
export declare class BaseDiagramComponent implements OnInit, AfterViewInit, OnDestroy {
    private host;
    private zone;
    ngAfterViewInit(): void;
    frameMousePanelRef: ElementRef<HTMLDivElement> | undefined;
    framePlaceholderRef: ElementRef<HTMLDivElement> | undefined;
    titlesMousePanelRef: ElementRef<HTMLDivElement> | undefined;
    titlesPlaceholderRef: ElementRef<HTMLDivElement> | undefined;
    scrollPanelRef: ElementRef<HTMLDivElement> | undefined;
    mousePanelRef: ElementRef<HTMLDivElement> | undefined;
    placeholderRef: ElementRef<HTMLDivElement> | undefined;
    calloutPlaceholderRef: ElementRef<HTMLDivElement> | undefined;
    controlPanelRef: ElementRef<HTMLDivElement> | undefined;
    centerOnCursor: boolean;
    _onHighlightChanging(event: Event, itemId: number | string | null, newItemId: number | string | null): any;
    _onHighlightChanged(eventArgs: any): void;
    _onCursorChanging(event: Event, itemId: number | string | null, newItemId: number | string | null): any;
    _onCursorChanged(eventArgs: any): void;
    _onSelectionChanging(event: Event, selectedItems: Array<string | number>, newSelectedItems: Array<string | number>): any;
    _onSelectionChanged(eventArgs: any): void;
    private taskManagerFactory;
    private tasks;
    protected state: BaseDiagramState;
    private graphics;
    private layoutOptions;
    private timer;
    private observer;
    constructor(host: ElementRef, zone: NgZone, taskManagerFactory: TaskManagerFactory);
    onItemRender(data: any): import("@angular/core").TemplateRef<any> | null | undefined;
    onHighlightRender(data: any): import("@angular/core").TemplateRef<any> | null | undefined;
    onCursorRender(data: any): import("@angular/core").TemplateRef<any> | null | undefined;
    templatesHash: {
        [id: string]: TemplateConfig;
    };
    getOptions(): any;
    getGraphics(): Graphics;
    getLayout(): {
        forceCenterOnCursor: boolean;
        scrollPanelSize: Size;
        placeholderOffset: Point;
    };
    setLayout(layoutOptions: any): void;
    fixPixelAlignment(): void;
    onSizeChanged(): void;
    onScroll(event: Event): void;
    onRefreshViewport(): void;
    onFrameMouseMove(event: MouseEvent): void;
    onFrameClick(event: MouseEvent): void;
    onMouseMove(event: MouseEvent): void;
    getEventArgs(oldTreeItemId: string | number | null, newTreeItemId: string | number | null, name?: string | null): any;
    setHighlightItem(event: any, newHighlightItemId: string | number | null): void;
    setCursorItem(event: any, newCursorItemId: string | number | null): void;
    onClick(event: MouseEvent): void;
    onCheckboxChange(event: Event): void;
    onKeyDown(event: KeyboardEvent): void;
    setState(newState?: Partial<BaseDiagramState>): void;
    ngOnInit(): void;
    render(): void;
    placeholder: Placeholder | null;
    framePlaceholder: Placeholder | null;
    titlesPlaceholder: Placeholder | null;
    calloutPlaceholder: Placeholder | null;
    controlPanelStyle: Record<string, string | undefined | null>;
    frameMousePanelStyle: Record<string, string | undefined | null>;
    framePlaceholderStyle: Record<string, string | undefined | null>;
    titlesMousePanelStyle: Record<string, string | undefined | null>;
    titlesPlaceholderStyle: Record<string, string | undefined | null>;
    scrollPanelStyle: Record<string, string | undefined | null>;
    placeholderOffset: Point | undefined;
    mousePanelStyle: Record<string, string | undefined | null>;
    placeholderStyle: Record<string, string | undefined | null>;
    calloutPlaceholderStyle: Record<string, string | undefined | null>;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseDiagramComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BaseDiagramComponent, "ng-component", never, { "centerOnCursor": "centerOnCursor"; }, {}, never, never>;
}
export {};
