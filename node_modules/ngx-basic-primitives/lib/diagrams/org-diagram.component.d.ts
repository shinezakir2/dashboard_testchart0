import { ElementRef, EventEmitter, NgZone, SimpleChanges } from '@angular/core';
import { TemplateRef } from '@angular/core';
import { ConnectorType, NavigationMode, PageFitMode, Visibility, OrientationType, HorizontalAlignmentType, VerticalAlignmentType, GroupByType, ElbowType, Enabled, SelectionPathMode, ShapeType, LineType, ChildrenPlacementType, AdviserPlacementType, TextOrientationType, PlacementType } from '../enums';
import { BackgroundAnnotationConfig } from '../configs/background-annotation-config';
import { ConnectorAnnotationConfig } from '../configs/connector-annotation-config';
import { HighlightPathAnnotationConfig } from '../configs/highlight-path-annotation-config';
import { LevelAnnotationConfig } from '../configs/level-annotation-config';
import { OrgItemConfig } from '../configs/org-item-config';
import { ShapeAnnotationConfig } from '../configs/shape-annotation-config';
import { Size, Thickness } from '../structs';
import { TemplateConfig } from '../configs/template-config';
import { BaseDiagramComponent } from './base-diagram.component';
import { OrgEventArgs, SelectionEventArgs } from '../events/';
import { OrgConfig } from '../configs/org-config';
import * as i0 from "@angular/core";
export declare class OrgDiagramComponent extends BaseDiagramComponent implements OrgConfig {
    navigationMode: NavigationMode;
    pageFitMode: PageFitMode;
    alignBranches: Boolean;
    minimalVisibility: Visibility;
    minimumVisibleLevels: number;
    orientationType: OrientationType;
    horizontalAlignment: HorizontalAlignmentType;
    verticalAlignment: VerticalAlignmentType;
    arrowsDirection: GroupByType;
    showExtraArrows: Boolean;
    extraArrowsMinimumSpace: number;
    connectorType: ConnectorType;
    bevelSize: number;
    elbowType: ElbowType;
    elbowDotSize: number;
    emptyDiagramMessage: string;
    items: Array<OrgItemConfig>;
    annotations: Array<BackgroundAnnotationConfig | ConnectorAnnotationConfig | HighlightPathAnnotationConfig | ShapeAnnotationConfig | LevelAnnotationConfig>;
    cursorItem: number | string | null;
    highlightItem: number | string | null;
    highlightGravityRadius: number;
    selectedItems: Array<number | string>;
    hasSelectorCheckbox: Enabled;
    selectCheckBoxLabel: string;
    selectionPathMode: SelectionPathMode;
    templates: Array<TemplateConfig>;
    defaultTemplateName: string | null;
    hasButtons: Enabled;
    buttonsTemplate: TemplateRef<any> | null;
    normalLevelShift: number;
    dotLevelShift: number;
    lineLevelShift: number;
    normalItemsInterval: number;
    dotItemsInterval: number;
    lineItemsInterval: number;
    cousinsIntervalMultiplier: number;
    itemTitleFirstFontColor: string;
    itemTitleSecondFontColor: string;
    minimizedItemShapeType: ShapeType;
    linesColor: string;
    linesWidth: number;
    linesType: LineType;
    highlightLinesColor: string;
    highlightLinesWidth: number;
    highlightLinesType: LineType;
    calloutMaximumVisibility: Visibility;
    showCallout: Boolean;
    calloutPlacementOffset: number;
    defaultCalloutTemplateName: string | null;
    calloutfillColor: string;
    calloutBorderColor: string | null;
    calloutOffset: number;
    calloutCornerRadius: number;
    calloutPointerWidth: string;
    calloutLineWidth: number;
    calloutOpacity: number;
    childrenPlacementType: ChildrenPlacementType;
    leavesPlacementType: ChildrenPlacementType;
    placeAssistantsAboveChildren: Boolean;
    placeAdvisersAboveChildren: Boolean;
    maximumColumnsInMatrix: number;
    buttonsPanelSize: number;
    groupTitlePanelSize: number;
    checkBoxPanelSize: number;
    groupTitlePlacementType: AdviserPlacementType;
    groupTitleOrientation: TextOrientationType;
    groupTitleVerticalAlignment: VerticalAlignmentType;
    groupTitleHorizontalAlignment: HorizontalAlignmentType;
    groupTitleFontSize: string;
    groupTitleFontFamily: string;
    groupTitleColor: string;
    groupTitleFontWeight: string;
    groupTitleFontStyle: string;
    groupTitleTemplate: TemplateRef<any> | null;
    levelTitlePanelSize: number;
    levelTitlePlacementType: AdviserPlacementType;
    levelTitlePlaceInside: Boolean;
    levelTitleOrientation: TextOrientationType;
    levelTitleVerticalAlignment: VerticalAlignmentType;
    levelTitleHorizontalAlignment: HorizontalAlignmentType;
    levelTitleFontSize: string;
    levelTitleFontFamily: string;
    levelTitleFontColor: string;
    levelTitleColor: string;
    levelTitleFontWeight: string;
    levelTitleFontStyle: string;
    levelTitleTemplate: TemplateRef<any> | null;
    levelBackgroundTemplate: TemplateRef<any> | null;
    distance: number;
    scale: number;
    minimumScale: number;
    maximumScale: number;
    showLabels: Enabled;
    labelSize: Size;
    labelOffset: number;
    labelOrientation: TextOrientationType;
    labelPlacement: PlacementType;
    labelFontSize: string;
    labelFontFamily: string;
    labelColor: string;
    labelFontWeight: string;
    labelFontStyle: string;
    enablePanning: Boolean;
    autoSizeMinimum: Size;
    autoSizeMaximum: Size;
    showFrame: Boolean;
    frameInnerPadding: Thickness;
    frameOuterPadding: Thickness;
    padding: Thickness;
    onHighlightChanging: EventEmitter<OrgEventArgs>;
    onHighlightChanged: EventEmitter<OrgEventArgs>;
    onCursorChanging: EventEmitter<OrgEventArgs>;
    onCursorChanged: EventEmitter<OrgEventArgs>;
    onSelectionChanging: EventEmitter<SelectionEventArgs>;
    onSelectionChanged: EventEmitter<SelectionEventArgs>;
    constructor(host: ElementRef, zone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    _onHighlightChanging(event: Event, itemId: number | string | null, newItemId: number | string | null): OrgEventArgs;
    _onHighlightChanged(eventArgs: any): void;
    _onCursorChanging(event: Event, itemId: number | string | null, newItemId: number | string | null): OrgEventArgs;
    _onCursorChanged(eventArgs: any): void;
    _onSelectionChanging(event: Event, selectedItems: Array<string | number>, newSelectedItems: Array<string | number>): SelectionEventArgs;
    _onSelectionChanged(eventArgs: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OrgDiagramComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OrgDiagramComponent, "org-diagram", never, { "navigationMode": "navigationMode"; "pageFitMode": "pageFitMode"; "alignBranches": "alignBranches"; "minimalVisibility": "minimalVisibility"; "minimumVisibleLevels": "minimumVisibleLevels"; "orientationType": "orientationType"; "horizontalAlignment": "horizontalAlignment"; "verticalAlignment": "verticalAlignment"; "arrowsDirection": "arrowsDirection"; "showExtraArrows": "showExtraArrows"; "extraArrowsMinimumSpace": "extraArrowsMinimumSpace"; "connectorType": "connectorType"; "bevelSize": "bevelSize"; "elbowType": "elbowType"; "elbowDotSize": "elbowDotSize"; "emptyDiagramMessage": "emptyDiagramMessage"; "items": "items"; "annotations": "annotations"; "cursorItem": "cursorItem"; "highlightItem": "highlightItem"; "highlightGravityRadius": "highlightGravityRadius"; "selectedItems": "selectedItems"; "hasSelectorCheckbox": "hasSelectorCheckbox"; "selectCheckBoxLabel": "selectCheckBoxLabel"; "selectionPathMode": "selectionPathMode"; "templates": "templates"; "defaultTemplateName": "defaultTemplateName"; "hasButtons": "hasButtons"; "buttonsTemplate": "buttonsTemplate"; "normalLevelShift": "normalLevelShift"; "dotLevelShift": "dotLevelShift"; "lineLevelShift": "lineLevelShift"; "normalItemsInterval": "normalItemsInterval"; "dotItemsInterval": "dotItemsInterval"; "lineItemsInterval": "lineItemsInterval"; "cousinsIntervalMultiplier": "cousinsIntervalMultiplier"; "itemTitleFirstFontColor": "itemTitleFirstFontColor"; "itemTitleSecondFontColor": "itemTitleSecondFontColor"; "minimizedItemShapeType": "minimizedItemShapeType"; "linesColor": "linesColor"; "linesWidth": "linesWidth"; "linesType": "linesType"; "highlightLinesColor": "highlightLinesColor"; "highlightLinesWidth": "highlightLinesWidth"; "highlightLinesType": "highlightLinesType"; "calloutMaximumVisibility": "calloutMaximumVisibility"; "showCallout": "showCallout"; "calloutPlacementOffset": "calloutPlacementOffset"; "defaultCalloutTemplateName": "defaultCalloutTemplateName"; "calloutfillColor": "calloutfillColor"; "calloutBorderColor": "calloutBorderColor"; "calloutOffset": "calloutOffset"; "calloutCornerRadius": "calloutCornerRadius"; "calloutPointerWidth": "calloutPointerWidth"; "calloutLineWidth": "calloutLineWidth"; "calloutOpacity": "calloutOpacity"; "childrenPlacementType": "childrenPlacementType"; "leavesPlacementType": "leavesPlacementType"; "placeAssistantsAboveChildren": "placeAssistantsAboveChildren"; "placeAdvisersAboveChildren": "placeAdvisersAboveChildren"; "maximumColumnsInMatrix": "maximumColumnsInMatrix"; "buttonsPanelSize": "buttonsPanelSize"; "groupTitlePanelSize": "groupTitlePanelSize"; "checkBoxPanelSize": "checkBoxPanelSize"; "groupTitlePlacementType": "groupTitlePlacementType"; "groupTitleOrientation": "groupTitleOrientation"; "groupTitleVerticalAlignment": "groupTitleVerticalAlignment"; "groupTitleHorizontalAlignment": "groupTitleHorizontalAlignment"; "groupTitleFontSize": "groupTitleFontSize"; "groupTitleFontFamily": "groupTitleFontFamily"; "groupTitleColor": "groupTitleColor"; "groupTitleFontWeight": "groupTitleFontWeight"; "groupTitleFontStyle": "groupTitleFontStyle"; "groupTitleTemplate": "groupTitleTemplate"; "levelTitlePanelSize": "levelTitlePanelSize"; "levelTitlePlacementType": "levelTitlePlacementType"; "levelTitlePlaceInside": "levelTitlePlaceInside"; "levelTitleOrientation": "levelTitleOrientation"; "levelTitleVerticalAlignment": "levelTitleVerticalAlignment"; "levelTitleHorizontalAlignment": "levelTitleHorizontalAlignment"; "levelTitleFontSize": "levelTitleFontSize"; "levelTitleFontFamily": "levelTitleFontFamily"; "levelTitleFontColor": "levelTitleFontColor"; "levelTitleColor": "levelTitleColor"; "levelTitleFontWeight": "levelTitleFontWeight"; "levelTitleFontStyle": "levelTitleFontStyle"; "levelTitleTemplate": "levelTitleTemplate"; "levelBackgroundTemplate": "levelBackgroundTemplate"; "distance": "distance"; "scale": "scale"; "minimumScale": "minimumScale"; "maximumScale": "maximumScale"; "showLabels": "showLabels"; "labelSize": "labelSize"; "labelOffset": "labelOffset"; "labelOrientation": "labelOrientation"; "labelPlacement": "labelPlacement"; "labelFontSize": "labelFontSize"; "labelFontFamily": "labelFontFamily"; "labelColor": "labelColor"; "labelFontWeight": "labelFontWeight"; "labelFontStyle": "labelFontStyle"; "enablePanning": "enablePanning"; "autoSizeMinimum": "autoSizeMinimum"; "autoSizeMaximum": "autoSizeMaximum"; "showFrame": "showFrame"; "frameInnerPadding": "frameInnerPadding"; "frameOuterPadding": "frameOuterPadding"; "padding": "padding"; }, { "onHighlightChanging": "onHighlightChanging"; "onHighlightChanged": "onHighlightChanged"; "onCursorChanging": "onCursorChanging"; "onCursorChanged": "onCursorChanged"; "onSelectionChanging": "onSelectionChanging"; "onSelectionChanged": "onSelectionChanged"; }, never, never>;
}
