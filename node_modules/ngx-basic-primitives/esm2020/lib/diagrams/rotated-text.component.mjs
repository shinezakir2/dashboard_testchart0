import { Component, Input } from "@angular/core";
import { TextOrientationType, VerticalAlignmentType, HorizontalAlignmentType } from "../enums";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class RotatedText {
    constructor() {
        this.width = 0;
        this.height = 0;
        this.orientation = TextOrientationType.RotateRight;
        this.horizontalAlignment = HorizontalAlignmentType.Center;
        this.verticalAlignment = VerticalAlignmentType.Middle;
        this.hasVerticalAlignment = false;
        this.tableStyle = {};
        this.tdStyle = {};
        this.divStyle = {};
    }
    ngOnChanges() {
        const transform = this.getTransform(this.orientation);
        let size = {};
        if (this.orientation === TextOrientationType.Horizontal) {
            size = {
                width: this.width + "px",
                height: this.height + "px",
                maxWidth: this.width + "px",
                maxHeight: this.height + "px"
            };
        }
        else {
            size = {
                width: this.height + "px",
                height: this.width + "px",
                maxWidth: this.height + "px",
                maxHeight: this.width + "px",
                left: Math.round(this.width / 2.0 - this.height / 2.0) + "px",
                top: Math.round(this.height / 2.0 - this.width / 2.0) + "px"
            };
        }
        var style = {
            position: "absolute",
            padding: 0,
            margin: 0,
            lineHeight: 1,
            textAlign: this.getHorizontalAlignment(this.horizontalAlignment),
            WebkitTransformOrigin: "center center",
            MozTransformOrigin: "center center",
            OTransformOrigin: "center center",
            msTransformOrigin: "center center",
            WebkitTransform: transform,
            MozTransform: transform,
            OTransform: transform,
            msTransform: transform,
            transform: transform,
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            overflow: "hidden",
            tableLayout: "fixed",
            ...size
        };
        this.hasVerticalAlignment = this.verticalAlignment !== VerticalAlignmentType.Top;
        this.tdStyle = {
            'verticalAlign': this.getVerticalAlignment(this.verticalAlignment),
            'padding': 0,
            'textOverflow': 'ellipsis',
            'whiteSpace': 'nowrap',
            'overflow': 'hidden'
        };
        this.tableStyle = {
            ...style,
            borderCollapse: "collapse"
        };
        this.divStyle = style;
    }
    getTransform(orientation) {
        let result = "";
        switch (orientation) {
            case TextOrientationType.RotateLeft:
                result = "rotate(-90deg)";
                break;
            case TextOrientationType.RotateRight:
                result = "rotate(90deg)";
                break;
            default:
                break;
        }
        return result;
    }
    getHorizontalAlignment(horizontalAlignment) {
        let result = "";
        switch (horizontalAlignment) {
            case HorizontalAlignmentType.Center:
                result = 'center';
                break;
            case HorizontalAlignmentType.Left:
                result = 'left';
                break;
            case HorizontalAlignmentType.Right:
                result = 'right';
                break;
        }
        return result;
    }
    getVerticalAlignment(verticalAlignment) {
        let result = "";
        switch (verticalAlignment) {
            case VerticalAlignmentType.Bottom:
                result = 'bottom';
                break;
            case VerticalAlignmentType.Middle:
                result = 'middle';
                break;
            case VerticalAlignmentType.Top:
                result = 'top';
                break;
        }
        return result;
    }
}
RotatedText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: RotatedText, deps: [], target: i0.ɵɵFactoryTarget.Component });
RotatedText.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: RotatedText, selector: "rotated-text", inputs: { width: "width", height: "height", orientation: "orientation", horizontalAlignment: "horizontalAlignment", verticalAlignment: "verticalAlignment" }, usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"hasVerticalAlignment; then tableTemplate; else divTemplate\"></div>\r\n<ng-template #tableTemplate>\r\n  <table [ngStyle]=\"tableStyle\">\r\n    <tbody>\r\n      <tr>\r\n        <td [ngStyle]=\"tdStyle\">\r\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</ng-template>\r\n<ng-template #divTemplate>\r\n  <div [ngStyle]=\"divStyle\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </div>\r\n</ng-template>\r\n<ng-template #content><ng-content></ng-content></ng-template>", styles: [""], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: RotatedText, decorators: [{
            type: Component,
            args: [{ selector: 'rotated-text', template: "<div *ngIf=\"hasVerticalAlignment; then tableTemplate; else divTemplate\"></div>\r\n<ng-template #tableTemplate>\r\n  <table [ngStyle]=\"tableStyle\">\r\n    <tbody>\r\n      <tr>\r\n        <td [ngStyle]=\"tdStyle\">\r\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</ng-template>\r\n<ng-template #divTemplate>\r\n  <div [ngStyle]=\"divStyle\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </div>\r\n</ng-template>\r\n<ng-template #content><ng-content></ng-content></ng-template>", styles: [""] }]
        }], propDecorators: { width: [{
                type: Input
            }], height: [{
                type: Input
            }], orientation: [{
                type: Input
            }], horizontalAlignment: [{
                type: Input
            }], verticalAlignment: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,